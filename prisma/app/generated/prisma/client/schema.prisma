generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Status {
  CANCELLED
  CONFIRMED
  COMPLETED
  PENDING
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  photo     String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[] @relation("CustomerAppointments")

  // to user with Role STAFF
  availability  StaffAvailability[]
  staffServices StaffService[]

  staffAppointments Appointment[] @relation("StaffAppointments")

  sessions UserSession[] @relation("UserSessions")
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Appointment {
  id     String   @id @default(uuid())
  notes  String?
  date   DateTime
  time   String
  status Status   @default(PENDING)
  price  Float

  // to users with Role CUSTOMER
  customerId String
  customer   User   @relation("CustomerAppointments", fields: [customerId], references: [id], onDelete: Cascade)

  // to users with Role STAFF
  staffId String?
  staff   User?   @relation("StaffAppointments", fields: [staffId], references: [id], onDelete: SetNull)

  // to services
  serviceId String
  service   ServiceItem @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceItem {
  id       String @id @default(uuid())
  type     String
  price    Float
  duration Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments  Appointment[]
  staffServices StaffService[]
}

model StaffAvailability {
  id      String @id @default(uuid())
  staffId String

  dayOfWeek Int
  startTime String
  endTime   String

  createdAt DateTime @default(now())
  staff     User     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([staffId])
}

model StaffService {
  id        String      @id @default(uuid())
  staff     User        @relation(fields: [staffId], references: [id])
  staffId   String
  service   ServiceItem @relation(fields: [serviceId], references: [id])
  serviceId String

  customPrice Float?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@unique([staffId, serviceId])
}
